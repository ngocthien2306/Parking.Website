@using Modules.Pleiger.CommonModels;
@using Modules.Common.Models;
@using Modules.Admin.Models;
@using InfrastructureCore.Models.Menu;
@using Modules.Pleiger.CommonModels.Models
@using Modules.Pleiger.CommonModels.Parking
@{
    Layout = null;
    SYMenuAccess pageSetting = new SYMenuAccess();
    pageSetting.SEARCH_YN = true;
    pageSetting.DELETE_YN = true;


    List<ToolbarInfo> lstNewToolbar = new List<ToolbarInfo>();
    ToolbarInfo info = new ToolbarInfo();
    info.Name = "Reload";
    info.ID = "btnReload";
    info.Icon = "<i class='fas fa-sync'></i>";
    info.MenuID = ViewBag.MenuID;
    lstNewToolbar.Add(info);

    string lessMonth = "lessMonth" + ViewBag.Thread;
    string onceRecently = "onceRecently" + ViewBag.Thread;
    string gridStore = "gridParkingCheckInPage" + ViewBag.Thread;
    string gridMember = "gridMember" + ViewBag.Thread;


    var approveRejectEntities = new[] {
        new {id = false, name =_loc.GetLocalizedString("Reject") },
        new {id = true, name = _loc.GetLocalizedString("Approve")}
    };

    var lessMonthData = new[] {
        new {id = 0, name = _loc.GetLocalizedString("All visitor")},
        new {id = 1, name = _loc.GetLocalizedString("Visit the last 1 month or less")}
    };

    var onceRecentlyData = new[] {
        new  {id = 0, name = _loc.GetLocalizedString("All visitor")},
        new  {id = 1, name = _loc.GetLocalizedString("Visit less than once recently")}
    };
}


<script>
    var storeNoMemberScreen = null;
    $(document).ready(function () {
        LoadingPage(1);
        GetStoreMastersByUser("#@gridStore", { siteType: "SIT001" });
        LoadingPage(0);
    })
    function GridRemoveUserInstance() {
        return $("#@gridMember").dxDataGrid("instance");
    }
    function GridStoreRemoveInstance() {
        return $("#@gridStore").dxDataGrid("instance");
    }
    // Region: btn click event
    //$('#btnSearch_@(ViewBag.Thread)').on('click', function () {
    //    LoadingPage(1);

    //    LoadingPage(0);
    //});

    $("#btnDelete_@ViewBag.Thread").on("click", function() {
        LoadingPage(1);
        var users = GridRemoveUserInstance().getSelectedRowsData();
        if(users.length < 1) {
            DevExpress.ui.dialog.alert("@_loc.GetLocalizedString("Please select the user you want to remove!")", "Notice");
            return;
        }
        var yes_or_no = DevExpress.ui.dialog.confirm("@(_loc.GetLocalizedString(MessageCode.MD0002))", '@(_loc.GetLocalizedString("Notice"))');
        yes_or_no.done(function (dialogResult) {
            if (dialogResult) {
                debugger;

                var url = '@Url.Action("RemoveListMember", "RemoveMember")';
                var data = []
                users.forEach(u => {
                    data.push({userId: u.userId, userName: u.userName});
                });

                var obj = {
                    userIds: JSON.stringify(data)
                }
                CRUDData(url, obj, METHOD.DELETE);

                setTimeout(function () {
                    SearchMember();
                }, 500);
            }
        })
        LoadingPage(0);
    })
    $("#btnSearch_@ViewBag.Thread").on("click", function () {
        LoadingPage(1);
        CheckSession();
        SearchMember();
        LoadingPage(0);
    });

    $("#btnReload_@ViewBag.Thread").on("click", function () {
        LoadingPage(1);
        CheckSession();
        RefreshTab(this);
        LoadingPage(0);
    });

    function SearchMember() {
        var obj = {
            storeNo: storeNoMemberScreen,
            lessMonth: GetDataElement("#@lessMonth"),
            onceRecently: GetDataElement("#@onceRecently")
        }
        var url = '@Url.Action("GetMemberRemove", "RemoveMember")';
        LoadGridData(url, obj, "#@gridMember", METHOD.POST);
    }

    function SearchMemberLessMonth(e) {
        debugger;
        //if (storeNoMemberScreen == null) {
        //    DevExpress.ui.dialog.alert("@_loc.GetLocalizedString("Please Select Store")", "Notice");
        //    return;
        //}
        //if(e.selectedItem.id == 1) {
        //    SetDataElement("#@onceRecently", 0)
        //}
        //var obj = {
        //    storeNo: storeNoMemberScreen,
        //    lessMonth: e.selectedItem.id
        //}
        //var url = '@Url.Action("GetMemberRemove", "RemoveMember")';
        //LoadGridData(url, obj, "#@gridMember", METHOD.POST);
    }

    function SearchMemberOnceRecently(e) {
        debugger;
        //if(e.selectedItem.id == 1) {
        //    SetDataElement("#@lessMonth", 0)
        //}
        //var obj = {
        //    storeNo: storeNoMemberScreen,
        //    onceRecently: e.selectedItem.id
        //}
        //var url = '@Url.Action("GetMemberRemove", "RemoveMember")';
        //LoadGridData(url, obj, "#@gridMember", METHOD.POST);
    }
    function UpdateApproveRejectRemoveUser(e) {
        debugger;
        var yes_or_no = DevExpress.ui.dialog.confirm("@(_loc.GetLocalizedString(MessageCode.MD0021))", '@(_loc.GetLocalizedString("Notice"))');
        yes_or_no.done(function (dialogResult) {
            if (dialogResult) {
                debugger;
                var checkins = GridRemoveUserInstance().getSelectedRowsData()[0];
                var url = '@Url.Action("UpdateApproveRejectRemoveUser", "CheckInHistory")';
                var obj = {
                    userId: checkins.userId,
                    status: e.value
                }
                CRUDData(url, obj, METHOD.GET);

                setTimeout(function () {
                    var stores = GridStoreRemoveInstance().getSelectedRowsData();
                    if (stores.length > 0) {
                        LoadMemberRemoveManagement(stores[0].storeNo, null);
                        return;
                    }
                    LoadMemberRemoveManagement(null, null);
                }, 1000);
            }
            else {
                debugger;

                GridRemoveUserInstance().refresh();

                //setTimeout(function () {
                //    LoadStoreDevice(gridStore.storeNo, null, null, null, null);
                //}, 1000);
            }
        })
    }
    // End Region: btn click event

    // Region: Get Data
    function ShowMemberRemoveSelection(e) {
        LoadingPage(1);
        CheckSession();
        GetGridIntance("#@gridMember").selectRows();
        LoadMemberRemoveManagement(e.data.storeNo, null);
    }

    function LoadMemberRemoveManagement(storeNo, userId) {
        storeNoMemberScreen = storeNo
        var obj = {
            storeNo: storeNo,
            userId: userId,
            lessMonth: GetDataElement("#@lessMonth"),
            onceRecently: GetDataElement("#@onceRecently")
        }
        var url = '@Url.Action("GetMemberInVehicle", "VehicleHistory")';
        LoadGridData(url, obj, "#@gridMember", METHOD.POST);
    }
    // Show popup member detail
    function GetVehicleDetail(e) {
        LoadingPage(1);
        CheckSession();
        debugger;
        ShowMemberRemoveDetail(e.data.storeNo, e.data.userId, e.data.plateNumber);
        LoadingPage(0);
    }

    function ShowMemberRemoveDetail(storeNo, userId, lp) {
        var url = '@Url.Action("GetMemberInVehicleDetail", "VehicleHistory")';
        var obj = {
            storeNo: storeNo,
            userId: userId,
            lp: lp,
            viewbagIndex: '@ViewBag.Thread',
            menuParent: '@ViewBag.MenuId'
        }
        OpenPopup(url, obj, METHOD.GET);
    }
        // End Region: Get Data
</script>

<div id="menutoolbar_@(ViewBag.Thread)">
    @await Component.InvokeAsync("AccessToolbar", new { pageSetting = pageSetting, lstNewToolbar = lstNewToolbar, threadID = ViewBag.Thread })
</div>

<div class="row" id="divindex_@(ViewBag.Thread)">
    <div class="col-md-12" style="width:100%;height:100%;">
        <div class="card" style="height:100%;width:100%;">
            <div id="headerpage_@(ViewBag.Thread)" class="card-header">
                <label>@(_loc.GetLocalizedString("Recently"))</label>
                <div class="row mt-1">
                    <div class="form-group col-md-2">
                        @(Html.DevExtreme().SelectBox()
                            .DataSource(lessMonthData)
                            .Value(0)
                            .DisplayExpr("name")
                            .ValueExpr("id")
                            .ID(lessMonth)
                            .OnSelectionChanged("SearchMemberLessMonth")
                            )
                    </div>
                    <span class="mt-2">@(_loc.GetLocalizedString("Months of non-entry")) </span>
                    <span class="mt-2"> ~</span>
                    <div class="form-group col-md-2">
                        @(Html.DevExtreme().SelectBox()
                            .ID(onceRecently)
                            .DataSource(onceRecentlyData)
                            .DisplayExpr("name")
                            .ValueExpr("id")
                            .Value(0)
                            .OnSelectionChanged("SearchMemberOnceRecently")
                            )
                    </div>
                    <span class="mt-2">@(_loc.GetLocalizedString("Less than one entry"))</span>

                </div>
            </div>
            <div id="bodypage_@(ViewBag.Thread)" class="mr-2 ml-2" style="height:100%">
                <div class="row" style="height:75vh">
                    <div class="col-md-3">
                        @(
                            Html.DevExtreme().DataGrid<KIO_StoreMaster>()
                            .ID(gridStore)
                            .Height("70vh")
                            .ShowBorders(true)
                            .ShowColumnLines(true)
                            .HeaderFilter(f => f.Visible(true))
                            .FilterRow(f => f.Visible(true))
                            .ShowRowLines(true)
                            .AllowColumnResizing(true)
                            .AllowColumnReordering(true)
                            .RemoteOperations(true)
                            .ColumnAutoWidth(true)
                            .ColumnFixing(c => c.Enabled(true))
                            .RepaintChangesOnly(true)
                            .Selection(s => s.Mode(SelectionMode.Single))
                            .Columns(c =>
                            {
                                c.AddFor(x => x.locationName).Caption(_loc.GetLocalizedString("Location"));
                                c.AddFor(x => x.storeName).Caption(_loc.GetLocalizedString("Store Name"));
                                c.AddFor(x => x.openDate).Caption(_loc.GetLocalizedString("Open Date")).Format("yyyy-MM-dd");
                            })

                            .Pager(pager =>
                            {
                                pager.ShowInfo(true);
                                pager.ShowNavigationButtons(true);
                            })
                            //.OnSelectionChanged("ShowMemberSelection")
                            .OnRowClick("ShowMemberRemoveSelection")
                            //.OnToolbarPreparing("onItemGridToolbarPreparing")
                            //.Paging(paging => paging.PageSize(100))
                            )
                    </div>
                    <div class="col-md-9">
                        @(
                                Html.DevExtreme().DataGrid<ParkingVehicleHistory>()
                                .ID(gridMember)
                                .Height("70vh")
                                .ShowBorders(true)

                                .ShowColumnLines(true)
                                .HeaderFilter(f => f.Visible(true))
                                .FilterRow(f => f.Visible(true))
                                .ShowRowLines(true)
                                .AllowColumnResizing(true)
                                .AllowColumnReordering(true)
                                .RemoteOperations(true)
                                .ColumnAutoWidth(true)
                                .ColumnFixing(c => c.Enabled(true))
                                .Scrolling(s => s.Mode(GridScrollingMode.Infinite))
                                .RepaintChangesOnly(true)
                                .Selection(s => s.Mode(SelectionMode.Multiple))
                                .Columns(c =>
                                {
                                    c.AddFor(x => x.no).Caption(_loc.GetLocalizedString("No")); // .Width("5%")

                                    c.Add().Caption(_loc.GetLocalizedString("Store Information")).Alignment(0).Columns(columns =>
                                {
                                    columns.AddFor(x => x.locationName).Caption(_loc.GetLocalizedString("Location")); // .Width("8%")
                                    columns.AddFor(x => x.storeName).Caption(_loc.GetLocalizedString("Store Name")); // .Width("10%")
                                });
                                    c.Add().Caption(_loc.GetLocalizedString("Member Information")).Alignment(0).Columns(columns =>
                                {
                                    columns.AddFor(x => x.userName).Caption(_loc.GetLocalizedString("Username")); // .Width("10%")
                                    columns.AddFor(x => x.birthday).Caption(_loc.GetLocalizedString("Birthday")).Format("yyyy-MM-dd").Alignment(0); // .Width("10%")
                                    columns.Add().Caption(_loc.GetLocalizedString("Gender")).CalculateCellValue(@<text>
                                        function(data) {
                                        return data.gender == true ? "@_loc.GetLocalizedString("Man")" : "@_loc.GetLocalizedString("Women")";
                                        }
                                    </text>);
                                    columns.AddFor(x => x.phoneNumber).Caption(_loc.GetLocalizedString("Phone Number")); // .Width("10%")
                                    columns.AddFor(x => x.registDate).Caption(_loc.GetLocalizedString("Registered Date")).Format("yyyy-MM-dd HH:mm:ss").Alignment(0); // .Width("10%")
                                });
                                c.Add().Caption(_loc.GetLocalizedString("Vehicle Information")).Alignment(0).Columns(columns =>
                                {
                                columns.AddFor(x => x.plateNumber).Caption(_loc.GetLocalizedString("Plate number")); // .Width("7%")
                                columns.AddFor(x => x.typeTransport).Caption(_loc.GetLocalizedString("Type Vehicle")).Format(Format.FixedPoint); // .Width("7%")
                                columns.AddFor(x => x.typePlate).Caption(_loc.GetLocalizedString("Type Plate number")).Format(Format.FixedPoint);
                                
                                                                                                                                                                           @*columns.Add().Caption(_loc.GetLocalizedString("Approve Reject")).CellTemplate(@<text>
                                        @(
                                            Html.DevExtreme().RadioGroup()
                                            .DataSource(approveRejectEntities)
                                            .ValueExpr("id")
                                            .DisplayExpr("name")
                                            .Value(new JS("data.approveReject"))
                                            .Layout(Orientation.Horizontal)
                                            .OnValueChanged("UpdateApproveRejectRemoveUser")
                                            .ReadOnly(false)
                                            )
                                        </text>).AutoExpandGroup(true);
                                    columns.AddFor(x => x.userStatus).Caption(_loc.GetLocalizedString("Status")); // .Width("5%")*@
                                });
                                })

                            .Pager(pager =>
                            {
                                pager.ShowInfo(true);
                                pager.ShowNavigationButtons(true);
                            })
                            //.OnSelectionChanged("onItemGridSelectionChanged")
                            .OnRowDblClick("GetVehicleDetail")
                            //.OnToolbarPreparing("onItemGridToolbarPreparing")
                            //.Paging(paging => paging.PageSize(100))
                            )
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

