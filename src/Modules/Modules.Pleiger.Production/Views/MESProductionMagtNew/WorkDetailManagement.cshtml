@model Modules.Pleiger.CommonModels.MES_SaleProject
@using InfrastructureCore.Models.Menu
@using Modules.Pleiger.CommonModels
@using Modules.Admin.Models
@using Modules.Pleiger.Production.Model 
@{
    List<ProductLineGroup> LineGroups = (List<ProductLineGroup>) ViewBag.LineGroups;
    ViewBag.OrderQuantity = Model.OrderQuantity;
    ViewBag.saleProject = Model;

    Layout = null;
    SYMenuAccess pageSetting = new SYMenuAccess();
    //pageSetting.CREATE_YN = true;


    List<ToolbarInfo> lstNewToolbar = new List<ToolbarInfo>();

    ToolbarInfo info = new ToolbarInfo();
    info.Name = "Back";
    info.ID = "btnBack";
    info.Icon = "<i class='fas fa-undo'></i>";
    lstNewToolbar.Add(info);

    ToolbarInfo infoReload = new ToolbarInfo();
    infoReload.Name = "Reload";
    infoReload.ID = "btnReload";
    infoReload.Icon = "<i class='fas fa-sync'></i>";
    infoReload.MenuID = ViewBag.MenuID;
    lstNewToolbar.Add(infoReload);

    if (Model.Btn_Save == true)
    {
        pageSetting.SAVE_YN = true;

        ToolbarInfo infoStart = new ToolbarInfo();
        infoStart.Name = "Completed Work";
        infoStart.ID = "btnCompleted";
        infoStart.Icon = "<i class='fas fa-cubes'></i>";
        lstNewToolbar.Add(infoStart);

        ToolbarInfo infoProjectReturn = new ToolbarInfo();
        infoProjectReturn.Name = "Project Return";
        infoProjectReturn.ID = "btnProjectReturn";
        infoProjectReturn.Icon = "<i class='fas fa-times'></i>";
        infoProjectReturn.Sort = 10;
        lstNewToolbar.Add(infoProjectReturn);

        ToolbarInfo projectClose = new ToolbarInfo();
        projectClose.Name = "Project Close";
        projectClose.ID = "btnProjectClose";
        projectClose.Icon = "<i class='far fa-window-close'></i>";
        projectClose.Sort = 11;
        lstNewToolbar.Add(projectClose);

    }

    List<MES_ProductLine> lstProdLines = (List<MES_ProductLine>)ViewBag.lstProdLines;

    string RequestDate = "RequestDate" + ViewBag.Thread;
    string OrderQuantity = "OrderQuantity" + ViewBag.Thread;
    string gridListFileProductionPlan = "gridListFileProductionPlan" + ViewBag.thread;

    
    string GridFileURL = "GridFileURL" + ViewBag.Thread;
}
<style>
    @RequestDate
    .dx-texteditor-container
    .dx-texteditor-input-container
    .dx-texteditor-input {
        color: red;
        font-weight: bold;
        background-color: yellow;
    }

    @OrderQuantity
    .dx-texteditor-container
    .dx-texteditor-input-container
    .dx-texteditor-input {
        color: red;
        font-weight: bold;
        background-color:yellow;
    }
</style>

<script>
    $(document).ready(function () {
        LoadingPage(1);
        ReziePageWorkDetailManagement();
        setValue_@(Model.ID)('@Model.FileID');
        GetLinkUrlSaleProjectToWorkMgt();
        LoadingPage(0);
    });



    //============================= Add List File =================================================
    var FileMasterID='@Model.FileID'
    var fileID_@(Model.ID) = '';

    $(function () {
        CheckSession();
        //SetDataGridProductLine@(ViewBag.Thread)();
        // Get list Request Type
        @*$.ajax({
            url: '@Url.Action("GetListCommonCode", "MESProductionRequest")',
            type: 'GET',
            async: false,
            data: { groupCode: "RQTP00" },
            dataType: 'json',
            success: function (result) {
                $("#ddlPopRequestType@(ViewBag.Thread)").dxSelectBox("option", "dataSource", result);
                $("#ddlPopRequestType@(ViewBag.Thread)").dxSelectBox("option", "value", '@Model.RequestType');
            }
        });*@
    });

    
    function GetLinkUrlSaleProjectToWorkMgt() {
        $.ajax({
            url: '@Url.Action("GetListFileUrlSaleProject", "MESProductionRequestChange")',
            type: 'GET',
            data: { projectCode: '@Model.ProjectCode' },
            dataType: 'json',
            success: function (result) {
                var grid = $("#@GridFileURL").dxDataGrid("instance");
                grid.option("dataSource", result);
                grid.refresh();
            }
        });
    }


    function setValue_@(Model.ID)(fileId) {
        debugger;
        setValueGrid_@(Model.ID)(fileId);
        fileID_@(Model.ID) = fileId;
        //updateIdFile(fileId);
        if ('@Model.Upload_File' == true) {
            debugger;
            $.ajax({
                url: '@Url.Action("GetSYFileUploadWithFileID", "FilesUpload")',
                type: "GET",
                data: { fileId: fileId },
                success: function (result) {
                    debugger;
                    var container = $(".dx-fileuploader-files-container");
                    container.empty();
                    var arrTemp = [];
                    $.each(result.data, function (index, item) {
                        arrTemp.push(item.FileDetail);

                        var strHTML = '<div class="dx-fileuploader-file-container">' +
                            '<div class="dx-fileuploader-button-container">' +
                            '<div class="dx-fileuploader-button dx-fileuploader-cancel-button dx-button dx-button-normal dx-button-mode-contained dx-widget dx-button-has-icon dx-state-invisible" aria-label="close" tabindex="0" role="button" aria-hidden="true">' +
                            '<div class="dx-button-content"><i class="dx-icon dx-icon-close"></i></div>' +
                            '</div>' +
                            '</div>' +
                            container.append(strHTML);
                    });
                    debugger;
                    $('#@(gridListFileProductionPlan)').dxDataGrid('option', 'dataSource', result.data);
                    $("#@(gridListFileProductionPlan)").dxDataGrid("instance").refresh();
                }
            });
        }
        else {
            $.ajax({
                url: '@Url.Action("GetSYFileUploadWithFileID", "FilesUpload")',
                type: "GET",
                data: { fileId: fileId },
                success: function (result) {
                    debugger;
                    var container = $(".dx-fileuploader-files-container");
                    container.empty();
                    var arrTemp = [];
                    $.each(result.data, function (index, item) {
                        arrTemp.push(item.FileDetail);

                        var strHTML = '<div class="dx-fileuploader-file-container">' +
                            '<div class="dx-fileuploader-button-container">' +
                            '<div class="dx-fileuploader-button dx-fileuploader-cancel-button dx-button dx-button-normal dx-button-mode-contained dx-widget dx-button-has-icon dx-state-invisible" aria-label="close" tabindex="0" role="button" aria-hidden="true">' +
                            '<div class="dx-button-content"><i class="dx-icon dx-icon-close"></i></div>' +
                            '</div>' +
                            '</div>' +
                            container.append(strHTML);
                    });
                    $('#@(gridListFileProductionPlan)').dxDataGrid('option', 'dataSource', result.data);
                    $("#@(gridListFileProductionPlan)").dxDataGrid("instance").refresh();
                }
            });

        }

}

    function setValueGrid_@(Model.ID)(fileId) {
        fileID_@(Model.ID) = fileId;
        $.ajax({
            url: '@Url.Action("GetSYFileUploadWithFileID", "FilesUpload")',
            type: "GET",
            data: { fileId: fileId },
            success: function (result) {
                var arrTemp = [];
                $.each(result.data, function (index, item) {
                    arrTemp.push(item.FileDetail);
                });
                debugger;
                $('#@(gridListFileProductionPlan)').dxDataGrid('option', 'dataSource', result.data);

            }
        });
    }

    function DeletegridListFilePopupWorkDetail(e) {
        CheckSession();
        debugger;
        var data = (e.row.data);
        var result = DevExpress.ui.dialog.confirm("<i>@Modules.Common.Models.MessageCode.MD0002</i>", "Confirm changes");
        result.done(function (dialogResult) {
            if (dialogResult) {
                $(e).parent().parent().parent().parent().parent().parent().remove();
                $.ajax({
                    url: '@Url.Action("DeleteFile", "FilesUpload")',
                    type: "POST",
                    data: { fileguid: data.FileGuid },
                    success: function (result) {
                        if (result.result == false) {
                            debugger;
                            DevExpress.ui.dialog.alert("Delete fail", "Error");
                        }
                        else {
                            debugger;
                            ReloadListFile();
                            DevExpress.ui.dialog.alert('@Modules.Common.Models.MessageCode.MD0008', "Success");
                            $("#@(gridListFileProductionPlan)").dxDataGrid("instance").refresh();
                        }
                    }
                });
            }
            else {
                return;
            }
        });
    }

    function ReloadListFile() {
        CheckSession();
        $.ajax({
            url: '@Url.Action("GetDetailByProjectCode", "MESDrawing")',
            type: 'GET',
            data: { projectCode: '@Model.ProjectCode' },
            dataType: 'json',
            success: function (result) {
                debugger;
                //updateIdFile(result.FileID);
                FileMasterID = result.FileID;
                fileID_@(Model.ID) = result.FileID;
                setValueGrid_@(Model.ID)(result.FileID);
                setValue_@(Model.ID)(result.FileID);
            }
        });
    }
    //============================= Add List File =================================================

    var FinishWarehouseCodeSlt = null;

    function getProjectCode@(ViewBag.Thread)() {
        return '@Model.ProjectCode';
    }

    $("#btnBack_@(ViewBag.Thread)").on("click", function () {
        CheckSession();
        let urlBack = '/MESProductionMagtNew/WorkManagement';
        $.ajax({
            url: '@Url.Action("GetMenuIDByBoadID", "Menu")',
            type: "POST",
            data: { strUrl: urlBack },
            dataType: "json",
            success: function (result) {
                GenerateTabConmonBoard(result.MenuName, urlBack, result.MenuID, false); // current menu id
            }
        });
    });

    $("#btnCompleted_@(ViewBag.Thread)").on("click", function () {
        $("#btnLineAuthen@(ViewBag.Thread)").addClass("d-none");
        $("#btnProductAuthen@(ViewBag.Thread)").removeClass("d-none");
        $("#btnSave_@(ViewBag.Thread)").attr("hidden", true);
        //$("#WorkerAuthenticationPop@(ViewBag.Thread)").modal("show");
        onUpdateWorkCompleted@(ViewBag.Thread)();
    });

    //Quan add 2021-04-09
    //Project Return Close WorkPlaning
    $("#btnProjectReturn_@(ViewBag.Thread)").on("click", function () {
        updateStatusProject@(ViewBag.Thread)(true);
    });

    $("#btnProjectClose_@(ViewBag.Thread)").on("click", function () {
        updateStatusProject@(ViewBag.Thread)(false);
    });

    function updateStatusProject@(ViewBag.Thread)(flag) {
        if (flag) {
            var result = DevExpress.ui.dialog.confirm("<i>@_loc.GetLocalizedString("Do you really want to return the project?")</i>", "Confirm changes");
            result.done(function (resultdialog) {
                if (resultdialog) {
                    $.ajax({
                        url: '@Url.Action("OnUpdateProjectReturnWorkMst", "MESProductionMagtNew")',
                        type: "POST",
                        data: {
                            ProjectCode: '@Model.ProjectCode',
                            ProdcnCode: '@Model.ProdcnCode',
                            Flag: flag,
                            ProjectStatusNow: "PJST04"
                        },
                        dataType: "json",
                        success: function (result) {
                            if (result.Success) {
                                DevExpress.ui.dialog.alert(result.Message, "Success")
                                $("#btnLineAuthen@(ViewBag.Thread)").addClass("d-none");
                                $("#btnProductAuthen@(ViewBag.Thread)").removeClass("d-none");
                                $("#btnSave_@(ViewBag.Thread)").attr("hidden", true);
                                setTimeout(function () {
                                    $("#btnBack_@(ViewBag.Thread)").click();
                                }, 300);
                                return;
                            }
                            else {
                                DevExpress.ui.dialog.alert(result.Message, "Error");
                                $("#btnLineAuthen@(ViewBag.Thread)").addClass("d-none");
                                $("#btnProductAuthen@(ViewBag.Thread)").removeClass("d-none");
                                $("#btnSave_@(ViewBag.Thread)").attr("hidden", true);
                                setTimeout(function () {
                                    $("#btnBack_@(ViewBag.Thread)").click();
                                }, 300);
                                return;
                            }
                        }
                    })
                }
            })
        }
        else
        {
            var result = DevExpress.ui.dialog.confirm("<i>@_loc.GetLocalizedString("Do you really want to close the project?")</i>", "Confirm changes");
            result.done(function (resultdialog) {
                if (resultdialog) {
                    $.ajax({
                        url: '@Url.Action("OnUpdateProjectReturn", "MESProductionMagtNew")',
                        type: "POST",
                        data: {
                            ProjectCode: '@Model.ProjectCode',
                            ProdcnCode: '@Model.ProdcnCode',
                            Flag: flag,
                            ProjectStatusNow: "PJST04"
                        },
                        dataType: "json",
                        success: function (result) {
                            if (result.Success) {
                                DevExpress.ui.dialog.alert(result.Message, "Success")
                                $("#btnLineAuthen@(ViewBag.Thread)").addClass("d-none");
                                $("#btnProductAuthen@(ViewBag.Thread)").removeClass("d-none");
                                $("#btnSave_@(ViewBag.Thread)").attr("hidden", true);
                                setTimeout(function () {
                                    $("#btnBack_@(ViewBag.Thread)").click();
                                }, 300);
                                return;
                            }
                            else {
                                DevExpress.ui.dialog.alert(result.Message, "Error");
                                $("#btnLineAuthen@(ViewBag.Thread)").addClass("d-none");
                                $("#btnProductAuthen@(ViewBag.Thread)").removeClass("d-none");
                                $("#btnSave_@(ViewBag.Thread)").attr("hidden", true);
                                setTimeout(function () {
                                    $("#btnBack_@(ViewBag.Thread)").click();
                                }, 300);
                                return;
                            }
                        }
                    })
                }
            })
        }
    }

    function onUpdateWorkCompleted@(ViewBag.Thread)() {
        CheckSession();
        $.ajax({
            url: '@Url.Action("OnUpdateWorkCompleted", "MESProductionMagtNew")',
            type: "POST",
            data: {
                ProjectCode: '@Model.ProjectCode',
                ProdcnCode: '@Model.ProdcnCode'
            },
            dataType: "json",
            success: function (result) {
                if (result.Success) {
                    // $("#WorkerAuthenticationPop@(ViewBag.Thread)").modal("hide");
                    DevExpress.ui.dialog.alert(result.Message, "Success")
                    setTimeout(function () {
                        $("#btnBack_@(ViewBag.Thread)").click();
                    }, 300);
                }
                else {
                    // $("#WorkerAuthenticationPop@(ViewBag.Thread)").modal("hide");
                    DevExpress.ui.dialog.alert(result.Message, "Error")
                }
            }
        });
    }

    $(window).resize(function () {
        //function recalculate resize height
        ReziePageWorkDetailManagement();
    });

    function ReziePageWorkDetailManagement() {
        // ReCalResize("divindex_@(ViewBag.Thread)", "ID", "tab-menu-content", "menutoolbar_@(ViewBag.Thread)", "height");
        if (CheckMobiNew()) {
        }
        else {
            if ($("#divindex_@(ViewBag.Thread)").is(':visible')){
                //ReCalResize("bodypage_@(ViewBag.Thread)", "ID", "divindex_@(ViewBag.Thread)", "headerpage_@(ViewBag.Thread)", "height");
                //ReCalResize("content_bodypage_@(ViewBag.Thread)", "ID", "bodypage_@(ViewBag.Thread)", "top_bodypage_@(ViewBag.Thread)", "height");
            }
        }
    }

    function reloadDetailPage@(ViewBag.Thread)() {
        //LoadingPage(1);
        let url = '/MESProductionMagtNew/WorkDetailManagement?projectCode=' + '@ViewBag.ProjectCode' + '&menuid=' + '@ViewBag.MenuID';
        GenerateTabConmonBoard('CBDetail', url, menuIDoTabActive, false)
        //LoadingPage(0);
    };

    $("#btnReload_@ViewBag.Thread").on("click", function () {
        reloadDetailPage@(ViewBag.Thread)();
    });

    function isCompleteWorkVisable@(ViewBag.Thread)() {
        debugger;
        var totalDoneQty = 0;
        for (var i = 0; i < @LineGroups.Count; i++) {
            var doneQty = $("#tb_ProductionDoneQty" + "@(ViewBag.Thread)" + "_" + (i + 1)).dxTextBox("option", "value");
            totalDoneQty += parseInt(doneQty);
        }
        var orderQty = $("#@OrderQuantity").dxNumberBox("option", "value");
        if (totalDoneQty == parseInt(orderQty)) {
            return true;
        } else {
            return false;
        }
    }
</script>

<div id="menutoolbar_@(ViewBag.Thread)">
    @await Component.InvokeAsync("AccessToolbar", new { pageSetting = pageSetting, lstNewToolbar = lstNewToolbar, threadID = ViewBag.Thread })
</div>
<div class="row" id="divindex_@(ViewBag.Thread)">
    <div class="col-md-12" style="width:100%;height:100%;">
        <div class="card" style="height:100%">
            <div class="card-header box-profile p-1" id="headerpage_@(ViewBag.Thread)">
                <div style="height:100%">
                    <div class="form-group row">
                        <label class="col-sm-1 col-form-label">@_loc.GetLocalizedString("UserProjectCode")</label>
                        <div class="col-sm-2">
                            @(Html.DevExtreme().TextBox().Visible(false).ID("ProjectCode" + ViewBag.Thread).Disabled(true).Value(Model.ProjectCode))
                            @(Html.DevExtreme().TextBox().ID("UserProjectCode" + ViewBag.Thread).Disabled(true).Value(Model.UserProjectCode))
                        </div>
                        <label class="col-sm-1 col-form-label">@_loc.GetLocalizedString("Production Name Planning")</label>
                        <div class="col-sm-2">
                            @(Html.DevExtreme().TextBox().ID("ProjectName" + ViewBag.Thread).Disabled(true).Value(Model.ProjectName))
                        </div>
                        <label class="col-sm-1 col-form-label">@_loc.GetLocalizedString("Production Status")</label>
                        <div class="col-md-2">
                            @(Html.DevExtreme().TextBox().ID("ProjectStatus" + ViewBag.Thread).Disabled(true).Value(Model.ProjectStatusName))
                        </div>
                        <label class="col-sm-1 col-form-label">@_loc.GetLocalizedString("Product Type")</label>
                        <div class="col-md-2">
                            @(Html.DevExtreme().TextBox().ID("ProductType" + ViewBag.Thread).Disabled(true).Value(Model.ProductType))
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="col-sm-1 col-form-label">@_loc.GetLocalizedString("Customer Name")</label>
                        <div class="col-md-2">
                            @(Html.DevExtreme().TextBox().ID("PartnerName" + ViewBag.Thread).Disabled(true).Value(Model.PartnerName))
                        </div>
                        <label class="col-sm-1 col-form-label">@_loc.GetLocalizedString("User Request")</label>
                        <div class="col-md-2">
                            @(Html.DevExtreme().TextBox().ID("UserRequest" + ViewBag.Thread).Disabled(true).Value(Model.UserNameRequest))
                        </div>
                        <label class="col-sm-1 col-form-label">@_loc.GetLocalizedString("Request Date")</label>
                        <div class="col-md-2">
                            @(Html.DevExtreme().DateBox().ID("RequestDate" + ViewBag.Thread).Type(DateBoxType.Date).Value(Model.RequestDate).Disabled(true)
                                .Value(DateTime.Now)
                                .DisplayFormat("yyyy-MM-dd")
                            )
                        </div>
                        @*<label class="col-sm-1 col-form-label">@_loc.GetLocalizedString("Request Type")</label>
                        <div class="col-md-2">
                            @(Html.DevExtreme().SelectBox()
                                .ID("ddlPopRequestType" + ViewBag.Thread)
                                .DisplayExpr("BASE_NAME1")
                                .ValueExpr("BASE_CODE").Disabled(true)
                            )
                        </div>*@
                    </div>

                    <div class="form-group row">
                        <label class="col-sm-1 col-form-label">@_loc.GetLocalizedString("Item Code")</label>
                        <div class="col-md-2">
                            @(Html.DevExtreme().TextBox().ID("ItemCode" + ViewBag.Thread).Disabled(true).Value(Model.ItemCode))
                        </div>
                        <label class="col-sm-1 col-form-label">@_loc.GetLocalizedString("Item Name")</label>
                        <div class="col-md-2">
                            @(Html.DevExtreme().TextBox().ID("ItemName" + ViewBag.Thread).Disabled(true).Value(Model.ItemName))
                        </div>
                        <label class="col-sm-1 col-form-label">@_loc.GetLocalizedString("Order Quantity")</label>
                        <div class="col-md-2">
                            @(Html.DevExtreme().NumberBox().ID("OrderQuantity" + ViewBag.Thread).Format("#,##0").Disabled(true).Value(Model.OrderQuantity))
                        </div>
                        <label class="col-sm-1 col-form-label">@_loc.GetLocalizedString("Material Warehouse")</label>
                        <div class="col-md-2">
                            @{
                                string MaterWHCode = "MaterWHCode" + ViewBag.Thread;
                            }
                            @(Html.DevExtreme().SelectBox()
                                .ID(MaterWHCode)
                                .DataSource(d => d.Mvc().Controller("MESProductionMagtNew")
                                        .LoadAction("GetListWareHouse")
                                        .Key("WarehouseCode")
                                    )
                                .Value(Model.MaterWHCode)
                                .DisplayExpr("WarehouseName")
                                .ValueExpr("WarehouseCode").Disabled(true)
                            )
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="col-sm-1 col-form-label">@_loc.GetLocalizedString("Production Code")</label>
                        <div class="col-md-2">
                            @(Html.DevExtreme().TextBox().ID("ProdcnCode" + ViewBag.Thread).Disabled(true).Value(Model.ProdcnCode).Disabled(true))
                        </div>

                        <label class="col-sm-1 col-form-label">@_loc.GetLocalizedString("Planning Done Date")</label>
                        <div class="col-md-2">
                            @(Html.DevExtreme().DateBox().ID("PlanningDoneDate" + ViewBag.Thread)
                                .Type(DateBoxType.Date)
                                .Value(Model.PlanDoneDate).Disabled(true)
                                .DisplayFormat("yyyy-MM-dd")
                            )
                        </div>
                        @*<label class="col-sm-1 col-form-label">@_loc.GetLocalizedString("Request Message")</label>
                        <div class="col-md-2">
                            @(Html.DevExtreme().TextBox().Disabled(true).ID("RequestMessage" + ViewBag.Thread).Value(Model.RequestMessage))
                        </div>*@
                        <label class="col-sm-1 col-form-label">@_loc.GetLocalizedString("Production Message")</label>
                        <div class="col-md-2">
                            @(Html.DevExtreme().TextBox().ID("ProdcnMessage" + ViewBag.Thread).Value(Model.ProdcnMessage).Disabled(true))
                        </div>
                    </div>
                </div>

                <!--=============================Add Production lines=================================================-->
                <div class="row">
                    <div class="col-md-12">
                        <fieldset class="customFieldset">
                            <legend class="customLegend">@_loc.GetLocalizedString("Production Lines")</legend>
                            @for (int i = 0; i < LineGroups.Count; i++)
                            {
                                @await Html.PartialAsync("_WorkProductionLineGrid", LineGroups[i])
                            }
                        </fieldset>
                    </div>
                </div>
                <!--=============================End Production lines=================================================-->

                <br />

                <!--=============================Add List File =================================================-->
                <div class="row" hidden>
                    <div class="col-md-12">
                        <fieldset class="customFieldset">
                            <legend class="customLegend">@_loc.GetLocalizedString("List Files")</legend>
                            @(Html.DevExtreme().DataGrid<Modules.Common.Models.SYFileUpload>()
                                .ID(gridListFileProductionPlan)
                                .KeyExpr("FileGuid")
                                .ShowBorders(true)
                                .ShowColumnLines(true)
                                .ShowRowLines(true)
                                .AllowColumnResizing(true)
                                .AllowColumnReordering(true)
                                .ColumnAutoWidth(true)
                                .FilterRow(filterRow => filterRow.Visible(true).ApplyFilter(GridApplyFilterMode.Auto))
                                //.Editing(editing =>
                                //{
                                //    editing.AllowDeleting(true);
                                //    editing.UseIcons(true);
                                //})
                                .Columns(c =>
                                {
                                c.AddFor(x => x.FilePathShowBrowser).Caption("FilePathShowBrowser").Alignment(HorizontalAlignment.Left).Visible(false);
                                c.AddFor(x => x.FileName).Caption(_loc.GetLocalizedString("FileName")).Alignment(HorizontalAlignment.Left).CellTemplate
                                (
                                                         @<text>
                                                                <% if (data.No == 0) { %>
                                                                                   <a href="#" onclick="OpenFileInBrowser(this)" data-pag-id="<%-data.FilePathShowBrowser%>" data-file-guid="<%-data.FileGuid%>"><%-data.FileName%></a>
                                                                <% }

                                                                 else if (data.No == 1) { %>
                                                                                   <span><%-data.FileName%></span>
                                                                 <% }
                                                                 else { %>
                                                                 <span><%-data.FileName%></span>
                                                                  <%  }
                                                                   %>


                                                                <script>
                                                                    function OpenFileInBrowser(obj) {
                                                                        let fileguid = $(obj).attr("data-file-guid").trim();
                                                                        var dataFileGuid = (fileguid);
                                                                        var dataFileID = '@Model.FileMasterID';
                                                                        var link = $("<a href='" + getLanguages() + "/FilesUpload/OpenFileInBrowser?fileguid=" + dataFileGuid + "'></a>");
                                                                        window.open(link[0].href);
                                                                    }
                                                                </script>
                                                            </text>
                                                        );


                                    c.AddFor(x => x.FileSize).Caption(_loc.GetLocalizedString("FileSize")).Alignment(HorizontalAlignment.Center);
                                    c.AddFor(x => x.FileType).Caption(_loc.GetLocalizedString("FileType")).Alignment(HorizontalAlignment.Left);

                                })
                                .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                                //.HeaderFilter(f => f.Visible(true))
                                .Paging(paging => paging.PageSize(20))
                                .Pager(pager =>
                                {
                                    pager.ShowPageSizeSelector(false);
                                    pager.AllowedPageSizes(new[] { 20,20,60});
                                    pager.ShowInfo(true);
                                })

                                )
                        </fieldset>
                    </div>
                </div>
                <!--=============================End List File =================================================-->
                 <!--=============================Add URL File =================================================-->
                 <div class="row" style=" margin-top: 2%;" hidden>
                    <div class="col-xs-12 col-md-12" style="height:100%;width:100%">
                        <fieldset class="customFieldset">
                            <legend class="customLegend">@_loc.GetLocalizedString("URL File")</legend>
                            @(Html.DevExtreme().DataGrid<MES_UrlByUser>()
                                .ID(GridFileURL)
                                .ShowBorders(true)
                                .ShowColumnLines(true)
                                .Selection(s => s.Mode(SelectionMode.Single))
                                .ShowRowLines(true)
                                .AllowColumnResizing(true)
                                .AllowColumnReordering(true)
                                .ColumnAutoWidth(true)
                                .Height("100%")
                                .FilterRow(filterRow => filterRow
                                .Visible(true)
                                .ApplyFilter(GridApplyFilterMode.Auto)
                                )
                                .RepaintChangesOnly(true)
                                .Selection(s => s.Mode(SelectionMode.Single)
                                .SelectAllMode(SelectAllMode.AllPages))

                                .Columns(c=> {
                                    c.AddFor(x => x.Id).Caption(_loc.GetLocalizedString("Id")).AllowEditing(false).Visible(false);
                                    c.AddFor(x => x.No).Caption(_loc.GetLocalizedString("No")).Width("10%").Alignment(HorizontalAlignment.Center).AllowEditing(false);
                                    c.AddFor(x => x.FileUrl).Caption(_loc.GetLocalizedString("URL")).Width("70%").Alignment(HorizontalAlignment.Center).AllowEditing(false)
                                    .CellTemplate(
                                        @<text>
                                                <a href="<%-data.FileUrl%>" target="_blank" data-pag-id="<%-data.FileUrl%>" data-file-guid="<%-data.FileGuid%>"><%-data.FileUrl%></a>
                                        </text>
                                    ).Alignment(HorizontalAlignment.Left);
                                })
                                .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                                .HeaderFilter(f => f.Visible(true))
                                .Paging(paging => paging.PageSize(50))
                                .Pager(pager =>
                                {
                                    pager.ShowInfo(true);
                                    pager.ShowNavigationButtons(true);
                                })
                            )
                        </fieldset>
                    </div>
                </div>
                <!--=============================End URL File =================================================-->


            </div>
        </div>
    </div>
</div>

