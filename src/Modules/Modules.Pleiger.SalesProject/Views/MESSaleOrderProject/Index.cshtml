@using Modules.Pleiger.CommonModels;
@using Modules.Common.Models;
@using InfrastructureCore.Models.Menu;

@using Modules.Admin.Models;

@{
    Layout = null;

    SYMenuAccess pageSetting = new SYMenuAccess();

    pageSetting.SEARCH_YN = true;
    pageSetting.EXCEL_YN = ViewBag.EXCEL_YN;
    pageSetting.CREATE_YN = ViewBag.CREATE_YN;
    pageSetting.IMPORT_EXCEL_YN = ViewBag.EXCEL_YN;

    //Add Readload Button
    List<ToolbarInfo> lstNewToolbar = new List<ToolbarInfo>();
    ToolbarInfo info = new ToolbarInfo();
    info.Name = "Reload";
    info.ID = "btnReload";
    info.Icon = "<i class='fas fa-sync'></i>";
    info.MenuID = ViewBag.MenuID;
    lstNewToolbar.Add(info);


    string saleOrderProjectName = "txtSaleOrderProjectName" + ViewBag.Thread;
    string saleOrderProjectCode = "txtsaleOrderProjectCode" + ViewBag.Thread;
    string projectOrderType = "selectProjectOrderType" + ViewBag.Thread;
    string orderNumber = "txtOrderNumber" + ViewBag.Thread;
    string customer = "PartnerName" + ViewBag.Thread;
    string saleOrderProjectStatus = "selectsaleOrderProjectStatus" + ViewBag.Thread;
    string gridSalesOrderProject = "gridSalesOrderProject" + ViewBag.Thread;
}
<style>
    .hidden-grid {
        display: none;
    }
</style>
<script>
    $(document).ready(function ()
    {
        //$(".dx-toolbar .dx-toolbar-items-container").addClass('hidden-grid');
        LoadingPage(1);
        var ProjectOrderType = MES_ComCodeDtls.filter(grCd => grCd.GROUP_CD == "POT000");

        $("#@projectOrderType").dxSelectBox({
            dataSource: ProjectOrderType,
            displayExpr: "BASE_NAME",
            valueExpr: "BASE_CODE"
        });

        var projectStatus = MES_ComCodeDtls.filter(grCd => grCd.GROUP_CD == "SOPJ00");
        //projectStatus = projectStatus.filter(g => g.BASE_CODE == 'PJST01' || g.BASE_CODE == 'PJST13' || g.BASE_CODE == 'PJST07');
        debugger;
        $("#@saleOrderProjectStatus").dxSelectBox({
            dataSource: projectStatus,
            displayExpr: "BASE_NAME",
            valueExpr: "BASE_CODE"
        });
        $("#@saleOrderProjectStatus").dxSelectBox("instance").option("value", 'SOPJ01');

        $("#@customer").find(".dx-texteditor-input").prop("readonly", true);
        LoadDataSaleOrderProject();
        LoadingPage(0);

    });

    $('#btnCreate_@ViewBag.Thread').on('click', function () {

        if (!CheckSession()) {
            window.location.reload(true);
        }
        ShowCreateSalesOrderProjectPopup();
    })

    $("#btnReload_@ViewBag.Thread").on("click", function () {
        LoadingPage(1);
        RefreshTab(this);
        LoadingPage(0);

    });

    $("#btnExcel_@ViewBag.Thread").on("click", function () {
        LoadingPage(1);
        var dataGrid = $('#@(gridSalesOrderProject)');
        ExportExcelCommon(dataGrid, "SaleOrderProject");
        LoadingPage(0);

    });

    $("#btnSearch_@ViewBag.Thread").on("click", function () {
        LoadingPage(1);
        LoadDataSaleOrderProject();
        LoadingPage(0);

    });

    $("#btnImportExcel_@ViewBag.Thread").on("click", function () {
        $.ajax({
            url: '@Url.Action("PopupExcelTemplateImport", "MESSaleOrderProject")',
            type: "GET",
            data:
            {
                viewbagIndex: '@ViewBag.Thread',
            },
            dataType: "html",
            success: function (result) {

                // parent popup
                $("#modalContent").removeClass("modal-xl");
                $("#modalContent").html(result);
                $("#modalContent").addClass("modal-md");
                $('#modalControl').modal('show');
                //LoadingPage(0);
            }
        });
    })

    function ExportDataSOPToExcel(dataGrid, worksheetname) {
        var dateFormat = new Date();
        var dateString = new Date(dateFormat.getTime() - (dateFormat.getTimezoneOffset() * 60000)).toISOString().split("T")[0];
        let fileName = menuObject.MenuName + "_" + dateString;
        //Note: count page which have grid and choose grid which need export
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet(worksheetname);
        //worksheet.columns = [
        //    { width: 5 }, { width: 30 }, { width: 25 }, { width: 15 }, { width: 25 }, { width: 40 }
        //];

        $(dataGrid).dxDataGrid({
            export: {
                enabled: true,
                //allowExportSelectedData: true
            },
            onExporting: function (e) {
                var workbook = new ExcelJS.Workbook();
                var worksheet = workbook.addWorksheet(worksheetname, {
                    headerFooter: { firstHeader: "", firstFooter: "Copyright by Pleiger" }
                });

                DevExpress.excelExporter.exportDataGrid({
                    component: e.component,
                    worksheet: worksheet,
                    customizeCell: function (options) {
                        var { gridCell, excelCell } = options;

                        if (gridCell.rowType === "header") {
                            excelCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: "FFFF00" } };
                        }

                    }
                }).then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: 'application/octet-stream' }), `${fileName}.xlsx`);
                    });
                });
                e.cancel = true;
            }
        });
        $('.dx-datagrid-export-button').trigger("click");
        $('.dx-datagrid-header-panel').attr('style', 'display:none');
    }

    function ShowPopupGetDataCustomer@(ViewBag.Thread)() {
        $.ajax({
            url: '@Url.Action("ShowPopupGetCustomer", "MESSaleOrderProject")',
            type: "GET",
            data:
            {
                idParent: '@ViewBag.thread'
            },
            dataType: "html",
            success: function (result) {
                // parent popup
                $("#modalContentChild").removeClass("modal-dialog");
                $("#modalContentChild").removeClass("modal-md");
                $("#modalContentChild").removeClass("modal-lg");
                $("#modalContentChild").removeClass("modal-xl");
                $("#modalContentChild").html(result);
                $("#modalContentChild").addClass("modal-dialog modal-lg");
                $('#modalControlChild').modal('show');
            }
        });
    }

    function LoadDataSaleOrderProject() {
        debugger;
        var projectName = $('#@saleOrderProjectName').dxTextBox('instance').option('value');
        var projectCode = $('#@saleOrderProjectCode').dxTextBox('instance').option('value');
        var projectType = $('#@projectOrderType').dxSelectBox('instance').option('value');
        var orderNumber = $('#@orderNumber').dxTextBox('instance').option('value');
        var salesOrderStatus = $('#@saleOrderProjectStatus').dxSelectBox('instance').option('value');
        var customer = $('#@customer').dxTextBox('instance').option('value');

        if (salesOrderStatus == "PJST02") {
            salesOrderStatus = "PJST03";
        }
        LoadingPage(1);

         $.ajax({
            url: '@Url.Action("GetListSaleOrderProject", "MESSaleOrderProject")',
             type: 'GET',
            data:
            {
                SalesOrderProjectName: projectName,
                ProjectOrderType: projectType,
                OrderNumber: orderNumber,
                SalesOrderStatus: salesOrderStatus,
                PartnerCode: customer,
                saleOrderProjectCode: projectCode
            },
            dataType: 'json',
            success: function (result) {
                $('#@gridSalesOrderProject').dxDataGrid({
                    dataSource: result.data
                })
                LoadingPage(0);
            },
            error: function () {
                LoadingPage(0);
            }
        });

    }

    function gridOrderItemOnToolbarPreparing@(ViewBag.Thread)(e) {
        let toolbarItems = e.toolbarOptions.items;
         toolbarItems.forEach(function (item, index) {
             if (item.name == "saveButton" || item.name == "revertButton" || item.name == "addRowButton") { //|| item.name == "addRowButton"
                 item.options.visible = false;
             }
         });
    };

    function ShowCreateSalesOrderProjectPopup() {
        LoadingPage(1);
        CheckSession();
        $.ajax({
                url: '@Url.Action("SalesProjectCreatePopup", "MESSaleOrderProject")',
                type: "GET",
                data:
                {
                    projectCode: null,
                    viewbagIndex: '@ViewBag.Thread',
                    menuParent:   '@ViewBag.MenuId'
                },
                dataType: "html",
                success: function (result) {
                    // parent popup
                    $("#modalContent").removeClass("modal-md");
                    $("#modalContent").html(result);
                    $("#modalContent").addClass("modal-xl");
                    $('#modalControl').modal('show');
                    //LoadingPage(0);
                }
        });
        LoadingPage(0);
    }

    function ShowPopupDetailSaleOrderProject(e) {
        LoadingPage(1);
        CheckSession();

        let projectCodeSelected = $(e).attr("data-Project-Code").trim();
        $.ajax({
            url: '@Url.Action("SalesProjectCreatePopupNew", "MESSaleOrderProject")',
            type: "GET",
            data: {
                projectCode: projectCodeSelected,
                viewbagIndex: '@ViewBag.Thread',
                menuParent:   '@ViewBag.MenuId'
            },
            dataType: "html",
            success: function (result) {
                $("#modalContent").html(result);
                $("#modalContent").addClass("modal-xl");
                $('#modalControl').modal('show');
            }
        });
        LoadingPage(0);
    }
</script>
<div id="menutoolbar_@(ViewBag.Thread)">
    @await Component.InvokeAsync("AccessToolbar", new { pageSetting = pageSetting, lstNewToolbar = lstNewToolbar, threadID = ViewBag.Thread })
</div>
<div class="row pr-1" id="divindex_@(ViewBag.Thread)">
    <div class="col-md-12" style="width:100%;height:100%;">
        <div class="card" style="height:100%;width:100%;">
            <div id="headerpage_@(ViewBag.Thread)" class="card-header">
                <div class="row">
                    <div class="form-group col-md-2">
                        <label>@(_loc.GetLocalizedString("Sales Order Project Code"))</label>
                        @(Html.DevExtreme().TextBox()
                                    .ID(saleOrderProjectCode)
                                    .Value("")

                        )
                    </div>
                    <div class="form-group col-md-2">
                        <label>@(_loc.GetLocalizedString("Sales Order Project Name"))</label>
                        @(Html.DevExtreme().TextBox()
                                    .ID(saleOrderProjectName)
                                    .Value("")

                        )
                    </div>
                    <div class="form-group col-md-2">
                        <label>@(_loc.GetLocalizedString("Project Order Type"))</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID(projectOrderType)

                            .ShowClearButton(true)
                            .SearchEnabled(true)
                            .DataSourceOptions(o => o.Paginate(true).PageSize(100))//async load more
                        )
                    </div>
                    <div class="form-group col-md-2">
                        <label>@(_loc.GetLocalizedString("Order Number"))</label>
                        @(Html.DevExtreme().TextBox()
                                    .ID(orderNumber)
                                    .Value("")

                         )
                    </div>
                    <div class="form-group col-md-2">
                        <label>@(_loc.GetLocalizedString("Customer"))</label>
                        @(Html.DevExtreme().TextBox()
                             .ID(customer)
                             .Value("")
                             .Mode(TextBoxMode.Text)
                             .ShowClearButton(true)
                             .StylingMode(EditorStylingMode.Outlined)
                             .Buttons(buttons =>
                             {
                                buttons.Add()
                                  .Name("ShowPopupGetDataCustomer")
                                  .Location(TextEditorButtonLocation.After)
                                  .Widget(w => w.Button()
                                    .ID("PopupGetCustomer"+ ViewBag.Thread)
                                    .Type(ButtonType.Default)
                                    .Icon("find")
                                    .OnClick("ShowPopupGetDataCustomer" + ViewBag.Thread));
                            })
                            )
                    </div>

                    <div class="form-group col-md-2">
                        <label>@(_loc.GetLocalizedString("Sales Order Project Status"))</label>
                        @(Html.DevExtreme().SelectBox()
                                    .ID(saleOrderProjectStatus)
                                    .ShowClearButton(true)
                                    .SearchEnabled(true)
                                    .DataSourceOptions(o => o.Paginate(true).PageSize(100))//async load more
                            )
                    </div>

                </div>
            </div>
            <div class="row" id="bodypage_@(ViewBag.Thread)">
                <div class="col-xs-12 col-md-12" style="height:100%;width:100%">
                    <div class="card-body  p-0 pl-2 pr-2 pb-2" style="height:100%;width:100%">
                        @(Html.DevExtreme().DataGrid<MES_SalesOrderProjectNew>()
                        .ID(gridSalesOrderProject)
                        //.DataSource(x=>x.Mvc().Controller("MESProductionRequestChange").LoadAction("GetListData"))
                        .ShowBorders(true)
                        .ShowColumnLines(true)
                        .Selection(s => s.Mode(SelectionMode.Single))
                        .ShowRowLines(true)
                        .AllowColumnResizing(true)
                        .AllowColumnReordering(true)
                        .ColumnAutoWidth(true)
                        .Height("75vh")
                        .FilterRow(filterRow => filterRow
                        .Visible(true)
                        .ApplyFilter(GridApplyFilterMode.Auto))
                        .RepaintChangesOnly(true)
                        .Selection(s => s.Mode(SelectionMode.Single)
                        .SelectAllMode(SelectAllMode.AllPages))
                        .Columns(c => {
                            c.AddFor(z => z.No).Caption(_loc.GetLocalizedString("No")).AllowEditing(false);
                            c.AddFor(z => z.TypeName).Caption(_loc.GetLocalizedString("Project Order Type")).AllowEditing(false);
                            c.AddFor(x => x.UserSalesOrderProjectCode).Caption((_loc.GetLocalizedString("Sales Order Project Code")));//Add new
                            c.AddFor(x => x.SalesOrderProjectCode).Caption((_loc.GetLocalizedString("Sales Order Project Code"))).Visible(false);//Add new

                            c.AddFor(z => z.SalesOrderProjectName).Caption(_loc.GetLocalizedString("Sales Order Project Name")).AllowEditing(false)
                            .CellTemplate(
                                    @<text>
                                            <a href="#" onclick="ShowPopupDetailSaleOrderProject(this)" data-Project-Code ="<%-data.SalesOrderProjectCode%>">
                                                <%-data.SalesOrderProjectName%>
                                            </a>
                                    </text>
                                );
                            c.AddFor(z => z.SalesOrderStatus).Caption(_loc.GetLocalizedString("Sales Order Project Status")).AllowEditing(false).AllowExporting(false);
                            c.AddFor(z => z.InCharge).Caption(_loc.GetLocalizedString("In Charge")).AllowEditing(false).Format("#.##0");
                            c.AddFor(z => z.OrderTeamCode).Caption(_loc.GetLocalizedString("Order Team")).AllowEditing(false);
                            c.AddFor(z => z.OrderNumber).Caption(_loc.GetLocalizedString("Order Number")).AllowEditing(false).Format("#.##0");
                            c.AddFor(z => z.Customer).Caption(_loc.GetLocalizedString("Customer")).AllowEditing(false);
                            c.AddFor(z => z.TotalOrderPrice).Caption(_loc.GetLocalizedString("Total Order Price")).AllowEditing(false).Format("#,##0");
                            c.AddFor(z => z.TotalOrderQuantity).Caption(_loc.GetLocalizedString("Total Order Quantity")).AllowEditing(false).Format("#,##0");
                            c.AddFor(z => z.CreateDate).Caption(_loc.GetLocalizedString("Create Date")).AllowEditing(false).Format("yyyy-MM-dd");
                            c.AddFor(z => z.EditDate).Caption(_loc.GetLocalizedString("Edit Date")).AllowEditing(false).Format("yyyy-MM-dd");
                            c.AddFor(z => z.ETC).Caption(_loc.GetLocalizedString("ETC")).AllowEditing(false);

                        })
                        .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                        .HeaderFilter(f => f.Visible(true))
                        .Paging(paging => paging.PageSize(20))
                        .Pager(pager =>
                        {
                            pager.ShowInfo(true);
                            pager.ShowNavigationButtons(true);
                        })
                        .OnToolbarPreparing("gridOrderItemOnToolbarPreparing" + ViewBag.Thread)
                        )
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>
